
================================================================================
Identifiers
================================================================================

lib main

let a = 0
let _b = 0
let _c_ = 0
let d' = 0
let e'' = 0
let f0 = 0

--------------------------------------------------------------------------------

(source_file
  (library_statement
    (identifier))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (int_literal)))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (int_literal)))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (int_literal)))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (int_literal)))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (int_literal)))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (int_literal))))

================================================================================
Prefix expressions
================================================================================

lib main

let pe1 = !true
let pe2 = -1.1
let pe3 = &str
let pe4 = *v

--------------------------------------------------------------------------------

(source_file
  (library_statement
    (identifier))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (prefix_expression
        (true))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (prefix_expression
        (float_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (prefix_expression
        (identifier))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (prefix_expression
        (identifier)))))

================================================================================
Infix expressions
================================================================================

lib main

let ie1 = a + 1
let ie2 = 0 - 1
let ie3 = a * b
let ie4 = b / 0
let ie5 = 1 < 0
let ie6 = 2 > 3
let ie7 = a <= b
let ie8 = b >= c
let ie9 = false == true
let ie10 = 1 != 1
let ie11 = true && false
let ie12 = false || false
let ie13 = 0 % 10

--------------------------------------------------------------------------------

(source_file
  (library_statement
    (identifier))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (identifier)
        (int_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (int_literal)
        (int_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (identifier)
        (identifier))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (identifier)
        (int_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (int_literal)
        (int_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (int_literal)
        (int_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (identifier)
        (identifier))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (identifier)
        (identifier))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (false)
        (true))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (int_literal)
        (int_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (true)
        (false))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (false)
        (false))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (int_literal)
        (int_literal)))))

================================================================================
Postfix expressions
================================================================================

lib main

let pe1 = i++
let pe2 = i--

--------------------------------------------------------------------------------

(source_file
  (library_statement
    (identifier))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (postfix_expression
        (identifier))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (postfix_expression
        (identifier)))))

================================================================================
Grouped expressions
================================================================================

lib main

let ge1 = (1 * 2)
let ge2 = (!func()) || false

--------------------------------------------------------------------------------

(source_file
  (library_statement
    (identifier))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (group_expression
        (infix_expression
          (int_literal)
          (int_literal)))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (infix_expression
        (group_expression
          (prefix_expression
            (call_expression
              (identifier))))
        (false)))))

================================================================================
Use expressions
================================================================================

lib main

let ue = use x {
  x = 1
}
--------------------------------------------------------------------------------

(source_file
  (library_statement
    (identifier))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (use_expression
        (identifier)
        (block_statement
          (assignment_statement
            (decleration_list
              (identifier))
            (assignable_expression_list
              (int_literal))))))))

================================================================================
Copy expressions
================================================================================

lib main

let cue1 = a^
let cue2 = a^ {
   cue = 1
}

--------------------------------------------------------------------------------

(source_file
  (library_statement
    (identifier))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (copy_expression
        (identifier))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (copy_expression
        (identifier)
        (block_statement
          (assignment_statement
            (decleration_list
              (identifier))
            (assignable_expression_list
              (int_literal))))))))

================================================================================
If expressions
================================================================================

lib main

let ie = if true { 1 } else if false { -1 } else { 0 }

--------------------------------------------------------------------------------

(source_file
  (library_statement
    (identifier))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (if_expression
        (true)
        (int_literal)
        (if_expression
          (false)
          (prefix_expression
            (int_literal))
          (int_literal))))))

================================================================================
Function call expressions
================================================================================

lib main

let fce1 = a(b(c()))
let fce2 = a(b,c,e)

--------------------------------------------------------------------------------

(source_file
  (library_statement
    (identifier))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (call_expression
        (identifier)
        (call_expression
          (identifier)
          (call_expression
            (identifier))))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (call_expression
        (identifier)
        (identifier)
        (identifier)
        (identifier)))))

================================================================================
Match expressions
================================================================================

lib main

let me = match v { case 1: 0 case _: 1 }

let me2 = match v {
  case 1:
    let v = 2
    v
  case _: 
    a()
}

--------------------------------------------------------------------------------

(source_file
  (library_statement
    (identifier))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (match_expression
        (identifier)
        (match_expression_case
          (int_literal)
          (int_literal))
        (match_expression_default
          (int_literal)))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (match_expression
        (identifier)
        (match_expression_case
          (int_literal)
          (assignment_statement
            (decleration_list
              (let_statement
                (identifier)))
            (assignable_expression_list
              (int_literal)))
          (identifier))
        (match_expression_default
          (call_expression
            (identifier)))))))

================================================================================
Indexing expressions
================================================================================

lib main

let ie1 = a[1]
let ie2 = a[1:]
let ie3 = a[:-1]
let ie4 = a[2:5]
let ie5 = a[1:3][4:6]
let ie6 = a[0][1]
let ie7 = a[3][1:4]
let ie8 = a[1:4][0]
let ie9 = a[:]

--------------------------------------------------------------------------------

(source_file
  (library_statement
    (identifier))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (index_expression
        (identifier)
        (int_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (slice_expression
        (identifier)
        (int_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (slice_expression
        (identifier)
        (prefix_expression
          (int_literal)))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (slice_expression
        (identifier)
        (int_literal)
        (int_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (slice_expression
        (slice_expression
          (identifier)
          (int_literal)
          (int_literal))
        (int_literal)
        (int_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (index_expression
        (index_expression
          (identifier)
          (int_literal))
        (int_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (slice_expression
        (index_expression
          (identifier)
          (int_literal))
        (int_literal)
        (int_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (index_expression
        (slice_expression
          (identifier)
          (int_literal)
          (int_literal))
        (int_literal))))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (slice_expression
        (identifier)
        (MISSING identifier)))))

================================================================================
Dot expressions
================================================================================

lib main

let x = s.f

--------------------------------------------------------------------------------

(source_file
  (library_statement
    (identifier))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (dot_expression
        (identifier)
        (identifier)))))

================================================================================
Built-in functions 
================================================================================

lib main

let a = make([]byte, 128)

--------------------------------------------------------------------------------

(source_file
  (library_statement
    (identifier))
  (assignment_statement
    (decleration_list
      (let_statement
        (identifier)))
    (assignable_expression_list
      (call_expression
        (identifier)
        (special_argument_list
          (array_type
            (primitive_type))
          (int_literal))))))
